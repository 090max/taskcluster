version: 1
migrationScript: |-
  begin
    create extension pgcrypto;
    create table azure_queue_messages (
      message_id uuid not null primary key,
      queue_name text not null,
      message_text text not null,
      inserted timestamp not null,
      visible timestamp not null, -- visible after this time
      expires timestamp not null,  -- expired after this time
      pop_receipt uuid -- null means not popped
    );
    create index azure_queue_messages_name on azure_queue_messages(queue_name);
  end
methods:
  azure_queue_count:
    description: |
      Count messages in the named queue.
    mode: read
    serviceName: test-azqueue
    args: queue_name text
    returns: integer
    body: |-
      begin
        return (select count(*)
        from azure_queue_messages msgs
        -- TODO: think about whether we should skip locks here
        where msgs.queue_name = azure_queue_count.queue_name);
      end
  azure_queue_put:
    description: |
      Put the given message into the given queue.  The message will not be visible until
      after the visible timestamp, and will disappear after the expires timestamp.
    mode: write
    serviceName: test-azqueue
    args: queue_name text, message_text text, visible timestamp, expires timestamp
    returns: void
    body: |-
      begin
        insert into azure_queue_messages (
            queue_name,
            message_id,
            message_text,
            inserted,
            visible,
            expires
          ) values (
            azure_queue_put.queue_name,
            public.gen_random_uuid(),
            azure_queue_put.message_text,
            now(),
            azure_queue_put.visible,
            azure_queue_put.expires
          );
        execute 'notify ' || quote_ident(queue_name);
      end
  azure_queue_get:
    description: TODO
    mode: write
    serviceName: test-azqueue
    args: queue_name text, visible timestamp, count integer
    returns: table (message_id uuid, message_text text, pop_receipt uuid)
    body: |-
      begin
        return query update azure_queue_messages m1
          set
            pop_receipt = public.gen_random_uuid(),
            visible = azure_queue_get.visible
          where
            m1.message_id in (
              select m2.message_id from azure_queue_messages m2
              where m2.queue_name = azure_queue_get.queue_name
                and m2.visible < now()
                and m2.expires > now()
              order by m2.inserted
              for update skip locked -- magic sauce TODO more comments / links
              limit count
          )
          returning m1.message_id, m1.message_text, m1.pop_receipt;
      end
