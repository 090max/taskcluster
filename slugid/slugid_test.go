package slugid

import(
    "fmt"
    "regexp"
    "testing"

    "github.com/taskcluster/taskcluster-cli/extpoints"
    "github.com/stretchr/testify/assert"
)

func TestSlugid(t *testing.T) {

    assert := assert.New(t)

    assert.Equal(1,1)

    // Test v4
    {
        slug, _ := v4()
        match, err := regexp.MatchString("^[A-Za-z0-9-_]{22}$", slug)

        if err != nil {
            t.Error(fmt.Sprintf("Error matching string generated by v4(): %s", err))
        }
        if match == false {
            t.Error(fmt.Sprintf("Slug generated by v4() is invalid."))
        }
    }

    // Test nice
    {
        slug, _ := nice()
        match, err := regexp.MatchString("^[A-Za-z0-9-_]{22}$", slug)

        if err != nil {
            t.Error(fmt.Sprintf("Error matching string generated by nice(): %s", err))
        }
        if match == false {
            t.Error(fmt.Sprintf("Slug generated by nice() is invalid."))
        }
    }

    // Test valid slug decode
    {
        context := extpoints.Context{}
        context.Arguments = make(map[string]interface{})
        context.Arguments["<slug>"] = "FOH9mI0mQ1C90yoMo3ajsg"

        out, err := decode(context)
        expected := "14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"

        if err != nil {
            t.Error(fmt.Sprintf("Error decoding test slug.\n%s", err))
        }
        if out != expected {
            t.Error(fmt.Sprintf("Got wrong output when decoding slug. Expected %s, got %s", expected, out))
        }
    }

    // Test invalid slug decode
    {
        slug := "abc"

        context := extpoints.Context{}
        context.Arguments = make(map[string]interface{})
        context.Arguments["<slug>"] = slug

        _, err := decode(context)

        if err == nil {
            t.Error(fmt.Sprintf("Expected error when decoding invalid slug '%s'.", slug))
        }
    }

    // Test valid uuid encode
    {
        context := extpoints.Context{}
        context.Arguments = make(map[string]interface{})
        context.Arguments["<uuid>"] = "14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"

        out, err := encode(context)
        expected := "FOH9mI0mQ1C90yoMo3ajsg"

        if err != nil {
            t.Error(fmt.Sprintf("Error encoding test uuid.\n%s", err))
        }
        if out != expected {
            t.Error(fmt.Sprintf("Got wrong output when encoding uuid. Expected %s, got %s", expected, out))
        }
    }

    // Test invalid uuid encode
    {
        uuid := "xyz"

        context := extpoints.Context{}
        context.Arguments = make(map[string]interface{})
        context.Arguments["<uuid>"] = uuid

        _, err := encode(context)

        if err == nil {
            t.Error(fmt.Sprintf("Expected error when encoding invalid uuid '%s'.", uuid))
        }
    }
}
