// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package scheduler

import (
	"encoding/json"

	"github.com/taskcluster/taskcluster-client-go/tcclient"
)

type (
	// Information about a **task-graph** as known by the scheduler, with all the state of all individual tasks.
	InspectTaskGraphResponse struct {

		// Required task metadata
		Metadata struct {

			// Human readable description of task-graph, **explain** what it does!
			//
			// Max length: 32768
			Description string `json:"description"`

			// Human readable name of task-graph
			//
			// Max length: 255
			Name string `json:"name"`

			// E-mail of person who caused this task-graph, e.g. the person who did `hg push`
			//
			// Max length: 255
			Owner string `json:"owner"`

			// Link to source of this task-graph, should specify file, revision and repository
			//
			// Max length: 4096
			Source string `json:"source"`
		} `json:"metadata"`

		// List of scopes (or scope-patterns) that tasks of the task-graph is authorized to use.
		Scopes []string `json:"scopes"`

		Status TaskGraphStatusStructure `json:"status"`

		// Arbitrary key-value tags (only strings limited to 4k)
		Tags json.RawMessage `json:"tags"`

		// Mapping from task-labels to task information and state.
		Tasks []struct {

			// List of `taskId`s that requires this task to be _complete successfully_ before they can be scheduled.
			Dependents []string `json:"dependents"`

			// Human readable name from the task definition
			//
			// Max length: 255
			Name string `json:"name"`

			// List of required `taskId`s
			Requires []string `json:"requires"`

			// List of `taskId`s that have yet to complete successfully, before this task can be scheduled.
			RequiresLeft []string `json:"requiresLeft"`

			// Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.
			//
			// Mininum:    0
			// Maximum:    999
			Reruns int `json:"reruns"`

			// Number of reruns that haven't been used yet.
			//
			// Mininum:    0
			// Maximum:    999
			RerunsLeft int `json:"rerunsLeft"`

			// true, if the scheduler considers the task node as satisfied and hence no-longer prevents dependent tasks from running.
			Satisfied bool `json:"satisfied"`

			// State of the task as considered by the scheduler
			//
			// Possible values:
			//   * "unscheduled"
			//   * "scheduled"
			//   * "completed"
			//   * "failed"
			//   * "exception"
			State string `json:"state"`

			// Unique task identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.
			//
			// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
			TaskId string `json:"taskId"`
		} `json:"tasks"`
	}

	// Information about a **task** in a task-graph as known by the scheduler.
	InspectTaskGraphTaskResponse struct {

		// List of `taskId`s that requires this task to be _complete successfully_ before they can be scheduled.
		Dependents []string `json:"dependents"`

		// Human readable name from the task definition
		//
		// Max length: 255
		Name string `json:"name"`

		// List of required `taskId`s
		Requires []string `json:"requires"`

		// List of `taskId`s that have yet to complete successfully, before this task can be scheduled.
		RequiresLeft []string `json:"requiresLeft"`

		// Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.
		//
		// Mininum:    0
		// Maximum:    999
		Reruns int `json:"reruns"`

		// Number of reruns that haven't been used yet.
		//
		// Mininum:    0
		// Maximum:    999
		RerunsLeft int `json:"rerunsLeft"`

		// true, if the scheduler considers the task node as satisfied and hence no-longer prevents dependent tasks from running.
		Satisfied bool `json:"satisfied"`

		// State of the task as considered by the scheduler
		//
		// Possible values:
		//   * "unscheduled"
		//   * "scheduled"
		//   * "completed"
		//   * "failed"
		//   * "exception"
		State string `json:"state"`

		// Unique task identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.
		//
		// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
		TaskId string `json:"taskId"`
	}

	// Definition of a task that can be scheduled
	TaskDefinitionRequest struct {

		// Creation time of task
		Created tcclient.Time `json:"created"`

		// Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future
		Deadline tcclient.Time `json:"deadline"`

		// Task expiration, time at which task definition and status is deleted.
		// Notice that all artifacts for the must have an expiration that is no
		// later than this. If this property isn't it will be set to `deadline`
		// plus one year (this default may subject to change).
		Expires tcclient.Time `json:"expires"`

		// Object with properties that can hold any kind of extra data that should be
		// associated with the task. This can be data for the task which doesn't
		// fit into `payload`, or it can supplementary data for use in services
		// listening for events from this task. For example this could be details to
		// display on _treeherder_, or information for indexing the task. Please, try
		// to put all related information under one property, so `extra` data keys
		// for treeherder reporting and task indexing don't conflict, hence, we have
		// reusable services. **Warning**, do not stuff large data-sets in here,
		// task definitions should not take-up multiple MiBs.
		//
		// Default:    map[]
		Extra json.RawMessage `json:"extra"`

		// Required task metadata
		Metadata struct {

			// Human readable description of the task, please **explain** what the
			// task does. A few lines of documentation is not going to hurt you.
			//
			// Max length: 32768
			Description string `json:"description"`

			// Human readable name of task, used to very briefly given an idea about
			// what the task does.
			//
			// Max length: 255
			Name string `json:"name"`

			// E-mail of person who caused this task, e.g. the person who did
			// `hg push`. The person we should contact to ask why this task is here.
			//
			// Max length: 255
			Owner string `json:"owner"`

			// Link to source of this task, should specify a file, revision and
			// repository. This should be place someone can go an do a git/hg blame
			// to who came up with recipe for this task.
			//
			// Max length: 4096
			Source string `json:"source"`
		} `json:"metadata"`

		// Task-specific payload following worker-specific format. For example the
		// `docker-worker` requires keys like: `image`, `commands` and
		// `features`. Refer to the documentation of `docker-worker` for details.
		Payload json.RawMessage `json:"payload"`

		// Priority of task, this defaults to `normal`. Additional levels may be
		// added later.
		// **Task submitter required scopes** `queue:task-priority:high` for high
		// priority tasks.
		//
		// Possible values:
		//   * "high"
		//   * "normal"
		//
		// Default:    "normal"
		Priority string `json:"priority"`

		// Unique identifier for a provisioner, that can supply specified
		// `workerType`
		//
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		ProvisionerId string `json:"provisionerId"`

		// Number of times to retry the task in case of infrastructure issues.
		// An _infrastructure issue_ is a worker node that crashes or is shutdown,
		// these events are to be expected.
		//
		// Default:    5
		// Mininum:    0
		// Maximum:    49
		Retries int `json:"retries"`

		// List of task specific routes, AMQP messages will be CC'ed to these routes.
		// **Task submitter required scopes** `queue:route:<route>` for
		// each route given.
		//
		// Default:    []
		Routes []string `json:"routes"`

		// Identifier for the scheduler that _defined_ this task, this can be an
		// identifier for a user or a service like the `"task-graph-scheduler"`.
		// **Task submitter required scopes**
		// `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
		// This scope is also necessary to _schedule_ a defined task, or _rerun_ a
		// task.
		//
		// Default:    "-"
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		SchedulerId string `json:"schedulerId"`

		// List of scopes (or scope-patterns) that the task is
		// authorized to use.
		//
		// Default:    []
		Scopes []string `json:"scopes"`

		// Arbitrary key-value tags (only strings limited to 4k). These can be used
		// to attach informal meta-data to a task. Use this for informal tags that
		// tasks can be classified by. You can also think of strings here as
		// candidates for formal meta-data. Something like
		// `purpose: 'build' || 'test'` is a good example.
		//
		// Default:    map[]
		Tags json.RawMessage `json:"tags"`

		// Identifier for a group of tasks scheduled together with this task, by
		// scheduler identified by `schedulerId`. For tasks scheduled by the
		// task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
		// property isn't specified.
		//
		// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
		TaskGroupId string `json:"taskGroupId"`

		// Unique identifier for a worker-type within a specific provisioner
		//
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		WorkerType string `json:"workerType"`
	}

	// Definition of a task-graph that can be scheduled
	TaskGraphDefinition struct {

		// Required task metadata
		Metadata struct {

			// Human readable description of task-graph, **explain** what it does!
			//
			// Max length: 32768
			Description string `json:"description"`

			// Human readable name of task-graph, give people finding this an idea
			// what this graph is about.
			//
			// Max length: 255
			Name string `json:"name"`

			// E-mail of person who caused this task-graph, e.g. the person who did
			// `hg push` or whatever triggered it.
			//
			// Max length: 255
			Owner string `json:"owner"`

			// Link to source of this task-graph, should specify file, revision and
			// repository
			//
			// Max length: 4096
			Source string `json:"source"`
		} `json:"metadata"`

		// List of task-graph specific routes, AMQP messages will be CC'ed to these
		// routes prefixed by `'route.'`.
		//
		// Default:    []
		Routes []string `json:"routes"`

		// List of scopes (or scope-patterns) that tasks of the task-graph is
		// authorized to use.
		//
		// Default:    []
		Scopes []string `json:"scopes"`

		// Arbitrary key-value tags (only strings limited to 4k)
		//
		// Default:    map[]
		Tags json.RawMessage `json:"tags"`

		// List of nodes in the task-graph, each featuring a task definition and scheduling preferences, such as number of _reruns_ to attempt.
		Tasks []struct {

			// List of required `taskId`s
			//
			// Default:    []
			Requires []string `json:"requires"`

			// Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.
			//
			// Default:    0
			// Mininum:    0
			// Maximum:    100
			Reruns int `json:"reruns"`

			Task TaskDefinitionRequest `json:"task"`

			// Task identifier (`taskId`) for the task when submitted to the queue, also used in `requires` below. This must be formatted as a **slugid** that is a uuid encoded in url-safe base64 following [RFC 4648 sec. 5](http://tools.ietf.org/html/rfc4648#section-5)), but without `==` padding.
			//
			// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
			TaskId string `json:"taskId"`
		} `json:"tasks"`
	}

	// Definition of a task-graph that can be scheduled
	TaskGraphDefinition1 struct {

		// List of nodes in the task-graph, each featuring a task definition and scheduling preferences, such as number of _reruns_ to attempt.
		Tasks []struct {

			// List of required `taskId`s
			//
			// Default:    []
			Requires []string `json:"requires"`

			// Number of times to _rerun_ the task if it completed unsuccessfully. **Note**, this does not capture _retries_ due to infrastructure issues.
			//
			// Default:    0
			// Mininum:    0
			// Maximum:    100
			Reruns int `json:"reruns"`

			Task TaskDefinitionRequest `json:"task"`

			// Task identifier (`taskId`) for the task when submitted to the queue, also used in `requires` below. This must be formatted as a **slugid** that is a uuid encoded in url-safe base64 following [RFC 4648 sec. 5](http://tools.ietf.org/html/rfc4648#section-5)), but without `==` padding.
			//
			// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
			TaskId string `json:"taskId"`
		} `json:"tasks"`
	}

	// Response for a request for task-graph information
	TaskGraphInfoResponse struct {

		// Required task metadata
		Metadata struct {

			// Human readable description of task-graph, **explain** what it does!
			//
			// Max length: 32768
			Description string `json:"description"`

			// Human readable name of task-graph
			//
			// Max length: 255
			Name string `json:"name"`

			// E-mail of person who caused this task-graph, e.g. the person who did `hg push`
			//
			// Max length: 255
			Owner string `json:"owner"`

			// Link to source of this task-graph, should specify file, revision and repository
			//
			// Max length: 4096
			Source string `json:"source"`
		} `json:"metadata"`

		Status TaskGraphStatusStructure `json:"status"`

		// Arbitrary key-value tags (only strings limited to 4k)
		Tags json.RawMessage `json:"tags"`
	}

	// Response containing the status structure for a task-graph
	TaskGraphStatusResponse struct {
		Status TaskGraphStatusStructure `json:"status"`
	}

	// A representation of **task-graph status** as known by the scheduler, without the state of all individual tasks.
	TaskGraphStatusStructure struct {

		// Unique identifier for task-graph scheduler managing the given task-graph
		//
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		SchedulerId string `json:"schedulerId"`

		// Task-graph state, this enum is **frozen** new values will **not** be added.
		//
		// Possible values:
		//   * "running"
		//   * "blocked"
		//   * "finished"
		State string `json:"state"`

		// Unique task-graph identifier, this is UUID encoded as [URL-safe base64](http://tools.ietf.org/html/rfc4648#section-5) and stripped of `=` padding.
		//
		// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
		TaskGraphId string `json:"taskGraphId"`
	}
)
