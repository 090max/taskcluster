type LatestTask {
  taskId: ID!
  runId: Int!
  run: TaskRun
}

input WorkerQuarantine {
  quarantineUntil: DateTime!
}

type Worker {
    workerId: ID!
    workerGroup: ID!
    workerPoolId: ID!
    capacity: Int!
    created: DateTime!
    expires: DateTime!
    lastChecked: DateTime!
    lastModified: DateTime!
    state: String!

    # Note: These fields will trigger an additional request.
    recentTasks: [LatestTask]!
    queueDataExpires: DateTime! # when the data about this worker in queue will go away
    quarantineUntil: DateTime
    firstClaim: DateTime!
}

type WorkerEdge implements Edge {
  cursor: String
  node: Worker
}

type WorkerConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerEdge]
}

type WorkerPoolError {
    workerPoolId: ID!
    errorId: ID!
    kind: String!
    title: String!
    description: String!
    reported: DateTime!
    extra: JSON!
}

type WorkerPoolErrorEdge implements Edge {
  cursor: String
  node: WorkerPoolError
}

type WorkerPoolErrorConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerPoolErrorEdge]
}

type WorkerPool {
    workerPoolId: String!
    description: String!
    owner: String!
    providerId: String!
    config: JSON!
    emailOnError: Boolean!
    lastModified: DateTime!
    # Note: This field will trigger an additional request.
    errors(
      connection: PageConnection,
      filter: JSON
    ): WorkerPoolErrorConnection
    workers(
      connection: PageConnection,
      filter: JSON
    ): WorkerConnection

    # Note: These fields will trigger an additional request.
    lastDateActive: DateTime!
    pendingTasks: Int
    queueDataExpires: DateTime! # when the data about this worker pool in queue will go away
}

type WorkerPoolEdge implements Edge {
  cursor: String
  node: WorkerPool
}

type WorkerPoolConnection implements Connection {
  pageInfo: PageInfo
  edges: [WorkerPoolEdge]
}

input WorkerPoolInput {
    providerId: String!
    description: String!
    owner: String!
    emailOnError: Boolean!
    config: JSON!
}

type Provider {
    providerId: String!
    providerType: String!
}

type ProviderConnection implements Connection {
  pageInfo: PageInfo
  edges: [ProviderEdge]
}

type ProviderEdge implements Edge {
  cursor: String
  node: Provider
}

extend type Query {
  worker(workerPoolId: ID!, workerGroup: ID!, workerId: ID!): Worker
  workerPool(workerPoolId: ID!): WorkerPool

  workerPools(filter: JSON, connection: PageConnection): WorkerPoolConnection
  providers(filter: JSON, connection: PageConnection): ProviderConnection
}

extend type Mutation {
  quarantineWorker(
    workerPoolId: ID!,
    workerGroup: ID!,
    workerId: ID!,
    payload: WorkerQuarantine
  ): Worker

  createWorkerPool(workerPoolId: ID!, payload: WorkerPoolInput!): WorkerPool

  updateWorkerPool(workerPoolId: ID!, payload: WorkerPoolInput!): WorkerPool
}
