package whclient

// clientError implements net.Error
type clientError struct {
	errString string
	reconnect bool
	timeout   bool
}

func (c clientError) Error() string {
	return c.errString
}

func (c clientError) Temporary() bool {
	return c.reconnect
}

func (c clientError) Timeout() bool {
	return c.timeout
}

var (
	// ErrRetryTimedOut is returned when Reconnect() time exceeds MaxElapsedTime
	ErrRetryTimedOut = clientError{timeout: true, errString: "retry timed out"}

	// ErrBadToken is returned when a usable token can not be generated by the authorizer
	ErrBadToken = clientError{errString: "bad auth token"}

	// ErrRetryFailed is returned when retry attempts fail
	ErrRetryFailed = clientError{errString: "retry failed"}

	// ErrClientReconnecting is returned when the connection is reconnecting/
	// This is a temporary error
	ErrClientReconnecting = clientError{errString: "client reconnecting", reconnect: true}

	ErrClientClosed = clientError{errString: "client closed"}

	ErrAuthorizerNotProvided = clientError{errString: "authorizer function was not provided to client"}
)
