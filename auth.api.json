{
  "version": "0.2.0",
  "title": "Authentication API",
  "description": "Authentication related API end-points for taskcluster.",
  "baseUrl": "https://auth.taskcluster.net/v1",
  "entries": [
    {
      "type": "function",
      "method": "get",
      "route": "/client/<clientId>/scopes",
      "args": [
        "clientId"
      ],
      "name": "scopes",
      "title": "Get Client Authorized Scopes",
      "description": "Returns the scopes the client is authorized to access and the date-time\nwhere the clients authorization is set to expire.\n\nThis API end-point allows you inspect clients without getting access to\ncredentials, as provide by the `getCredentials` request below.",
      "scopes": [
        [
          "auth:inspect"
        ],
        [
          "auth:credentials"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/client-scopes-response.json#"
    },
    {
      "type": "function",
      "method": "get",
      "route": "/client/<clientId>/credentials",
      "args": [
        "clientId"
      ],
      "name": "getCredentials",
      "title": "Get Client Credentials",
      "description": "Returns the clients `accessToken` as needed for verifying signatures.\nThis API end-point also returns the list of scopes the client is\nauthorized for and the date-time where the client authorization expires\n\nRemark, **if you don't need** the `accessToken` but only want to see what\nscopes a client is authorized for, you should use the `getScopes`\nfunction described above.",
      "scopes": [
        [
          "auth:credentials"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/client-credentials-response.json#"
    },
    {
      "type": "function",
      "method": "get",
      "route": "/client/<clientId>",
      "args": [
        "clientId"
      ],
      "name": "client",
      "title": "Get Client Information",
      "description": "Returns all information about a given client. This end-point is mostly\nbuilding tools to administrate clients. Do not use if you only want to\nauthenticate a request, see `getCredentials` for this purpose.",
      "scopes": [
        [
          "auth:credentials"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/get-client-response.json#"
    },
    {
      "type": "function",
      "method": "put",
      "route": "/client/<clientId>",
      "args": [
        "clientId"
      ],
      "name": "createClient",
      "title": "Create Client",
      "description": "Create client with given `clientId`, `name`, `expires`, `scopes` and\n`description`. The `accessToken` will always be generated server-side,\nand will be returned from this request.\n\n**Required scopes**, in addition the scopes listed\nabove, the caller must also posses the all the scopes that is given to\nthe client that is created.",
      "scopes": [
        [
          "auth:create-client",
          "auth:credentials"
        ]
      ],
      "input": "http://schemas.taskcluster.net/auth/v1/create-client-request.json#",
      "output": "http://schemas.taskcluster.net/auth/v1/get-client-response.json#"
    },
    {
      "type": "function",
      "method": "post",
      "route": "/client/<clientId>/modify",
      "args": [
        "clientId"
      ],
      "name": "modifyClient",
      "title": "Modify Client",
      "description": "Modify client `name`, `expires`, `scopes` and\n`description`.\n\n**Required scopes**, in addition the scopes listed\nabove, the caller must also posses the all the scopes that is given to\nthe client that is updated.",
      "scopes": [
        [
          "auth:modify-client",
          "auth:credentials"
        ]
      ],
      "input": "http://schemas.taskcluster.net/auth/v1/create-client-request.json#",
      "output": "http://schemas.taskcluster.net/auth/v1/get-client-response.json#"
    },
    {
      "type": "function",
      "method": "delete",
      "route": "/client/<clientId>",
      "args": [
        "clientId"
      ],
      "name": "removeClient",
      "title": "Remove Client",
      "description": "Delete a client with given `clientId`.",
      "scopes": [
        [
          "auth:remove-client"
        ]
      ]
    },
    {
      "type": "function",
      "method": "post",
      "route": "/client/<clientId>/reset-credentials",
      "args": [
        "clientId"
      ],
      "name": "resetCredentials",
      "title": "Reset Client Credentials",
      "description": "Reset credentials for a client. This will generate a new `accessToken`.\nas always the `accessToken` will be generated server-side and returned.",
      "scopes": [
        [
          "auth:reset-credentials",
          "auth:credentials"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/get-client-response.json#"
    },
    {
      "type": "function",
      "method": "get",
      "route": "/list-clients",
      "args": [],
      "name": "listClients",
      "title": "List Clients",
      "description": "Return list with all clients",
      "scopes": [
        [
          "auth:client-clients"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/list-clients-response.json#"
    },
    {
      "type": "function",
      "method": "get",
      "route": "/azure/<account>/table/<table>/read-write",
      "args": [
        "account",
        "table"
      ],
      "name": "azureTableSAS",
      "title": "Get Shared-Access-Signature for Azure Table",
      "description": "Get an SAS string for use with a specific Azure Table Storage table.\nNote, this will create the table, if it doesn't already exists.",
      "scopes": [
        [
          "auth:azure-table-access:<account>/<table>"
        ]
      ],
      "output": "http://schemas.taskcluster.net/auth/v1/azure-table-access-response.json#"
    },
    {
      "type": "function",
      "method": "get",
      "route": "/ping",
      "args": [],
      "name": "ping",
      "title": "Ping Server",
      "description": "Documented later...\n\n**Warning** this api end-point is **not stable**."
    }
  ]
}