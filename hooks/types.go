// This source code file is AUTO-GENERATED by github.com/taskcluster/jsonschema2go

package hooks

import (
	"encoding/json"

	"github.com/taskcluster/taskcluster-client-go/tcclient"
)

type (
	// Information about an unsuccesful firing of the hook
	FailedFire struct {

		// The error that occurred when firing the task.  This is typically,
		// but not always, an API error message.
		Error json.RawMessage `json:"error"`

		// Possible values:
		//   * "error"
		Result string `json:"result"`

		// The time the task was created.  This will not necessarily match `task.created`.
		Time tcclient.Time `json:"time"`
	}

	// Definition of a hook that can create tasks at defined times.
	HookCreationRequest struct {

		// Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future.
		//
		// Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)
		//
		// Default:    "1 day"
		Deadline string `json:"deadline"`

		// Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.
		//
		// Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)
		//
		// Default:    "3 months"
		Expires string `json:"expires"`

		Metadata struct {

			// Long-form of the hook's purpose and behavior
			//
			// Max length: 32768
			Description string `json:"description"`

			// Whether to email the owner on an error creating the task.
			//
			// Default:    true
			EmailOnError bool `json:"emailOnError"`

			// Human readable name of the hook
			//
			// Max length: 255
			Name string `json:"name"`

			// Email of the person or group responsible for this hook.
			//
			// Max length: 255
			Owner string `json:"owner"`
		} `json:"metadata"`

		// Definition of the times at which a hook will result in creation of a task.
		// If several patterns are specified, tasks will be created at any time
		// specified by one or more patterns.
		//
		// Default:    []
		Schedule []string `json:"schedule"`

		Task TaskTemplate `json:"task"`
	}

	// Definition of a hook that will create tasks when defined events occur.
	HookDefinition struct {

		// Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future.
		//
		// Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)
		//
		// Default:    "1 day"
		Deadline string `json:"deadline"`

		// Task expiration, time at which task definition and status is deleted. Notice that all artifacts for the must have an expiration that is no later than this.
		//
		// Must be specified as `A years B months C days D hours E minutes F seconds`, though you may leave out zeros. For more details see: `taskcluster.fromNow` in [taskcluster-client](https://github.com/taskcluster/taskcluster-client)
		//
		// Default:    "3 months"
		Expires string `json:"expires"`

		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		HookGroupID string `json:"hookGroupId"`

		// Max length: 255
		HookID string `json:"hookId"`

		Metadata struct {

			// Long-form of the hook's purpose and behavior
			//
			// Max length: 32768
			Description string `json:"description"`

			// Whether to email the owner on an error creating the task.
			//
			// Default:    true
			EmailOnError bool `json:"emailOnError"`

			// Human readable name of the hook
			//
			// Max length: 255
			Name string `json:"name"`

			// Email of the person or group responsible for this hook.
			//
			// Max length: 255
			Owner string `json:"owner"`
		} `json:"metadata"`

		// Definition of the times at which a hook will result in creation of a task.
		// If several patterns are specified, tasks will be created at any time
		// specified by one or more patterns.  Note that tasks may not be created
		// at exactly the time specified.
		//                     {$ref: "http://schemas.taskcluster.net/hooks/v1/schedule.json"}
		Schedule json.RawMessage `json:"schedule"`

		Task TaskTemplate `json:"task"`
	}

	// List of `hookGroupIds`.
	HookGroups struct {
		Groups []string `json:"groups"`
	}

	// List of hooks
	HookList struct {
		Hooks []HookDefinition `json:"hooks"`
	}

	// A description of when a hook's task will be created, and the next scheduled time
	HookScheduleResponse struct {

		// The next time this hook's task is scheduled to be created. This property
		// is only present if there is a scheduled next time. Some hooks don't have
		// any schedules.
		NextScheduledDate tcclient.Time `json:"nextScheduledDate"`

		Schedule Schedule `json:"schedule"`
	}

	// A snapshot of the current status of a hook.
	HookStatusResponse struct {

		// Information about the last time this hook fired.  This property is only present
		// if the hook has fired at least once.
		LastFire json.RawMessage `json:"lastFire"`

		// The next time this hook's task is scheduled to be created. This property
		// is only present if there is a scheduled next time. Some hooks don't have
		// any schedules.
		NextScheduledDate tcclient.Time `json:"nextScheduledDate"`
	}

	// Information about no firing of the hook (e.g., a new hook)
	NoFire struct {

		// Possible values:
		//   * "no-fire"
		Result string `json:"result"`
	}

	// A list of cron-style definitions to represent a set of moments in (UTC) time.
	// If several patterns are specified, a given moment in time represented by
	// more than one pattern is considered only to be counted once, in other words
	// it is allowed for the cron patterns to overlap; duplicates are redundant.
	//
	// Default:    []
	Schedule []string

	// Information about a successful firing of the hook
	SuccessfulFire struct {

		// Possible values:
		//   * "success"
		Result string `json:"result"`

		// The task created
		//
		// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
		TaskID string `json:"taskId"`

		// The time the task was created.  This will not necessarily match `task.created`.
		Time tcclient.Time `json:"time"`
	}

	// Definition of a task embedded in a hook
	TaskTemplate struct {

		// Object with properties that can hold any kind of extra data that should be
		// associated with the task. This can be data for the task which doesn't
		// fit into `payload`, or it can supplementary data for use in services
		// listening for events from this task. For example this could be details to
		// display on _treeherder_, or information for indexing the task. Please, try
		// to put all related information under one property, so `extra` data keys
		// for treeherder reporting and task indexing don't conflict, hence, we have
		// reusable services. **Warning**, do not stuff large data-sets in here,
		// task definitions should not take-up multiple MiBs.
		//
		// Default:    map[]
		Extra json.RawMessage `json:"extra"`

		// Required task metadata
		Metadata struct {

			// Human readable description of the task, please **explain** what the
			// task does. A few lines of documentation is not going to hurt you.
			//
			// Max length: 32768
			Description string `json:"description"`

			// Human readable name of task, used to very briefly given an idea about
			// what the task does.
			//
			// Max length: 255
			Name string `json:"name"`

			// E-mail of person who caused this task, e.g. the person who did
			// `hg push`. The person we should contact to ask why this task is here.
			//
			// Max length: 255
			Owner string `json:"owner"`

			// Link to source of this task, should specify a file, revision and
			// repository. This should be place someone can go an do a git/hg blame
			// to who came up with recipe for this task.
			//
			// Max length: 4096
			Source string `json:"source"`
		} `json:"metadata"`

		// Task-specific payload following worker-specific format. For example the
		// `docker-worker` requires keys like: `image`, `commands` and
		// `features`. Refer to the documentation of `docker-worker` for details.
		Payload json.RawMessage `json:"payload"`

		// Priority of task, this defaults to `normal`. Additional levels may be
		// added later.
		// **Task submitter required scopes** `queue:task-priority:high` for high
		// priority tasks.
		//
		// Possible values:
		//   * "high"
		//   * "normal"
		//
		// Default:    "normal"
		Priority string `json:"priority"`

		// Unique identifier for a provisioner, that can supply specified
		// `workerType`
		//
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		ProvisionerID string `json:"provisionerId"`

		// Number of times to retry the task in case of infrastructure issues.
		// An _infrastructure issue_ is a worker node that crashes or is shutdown,
		// these events are to be expected.
		//
		// Default:    5
		// Mininum:    0
		// Maximum:    49
		Retries int `json:"retries"`

		// List of task specific routes, AMQP messages will be CC'ed to these routes.
		// **Task submitter required scopes** `queue:route:<route>` for
		// each route given.
		//
		// Default:    []
		Routes []string `json:"routes"`

		// Identifier for the scheduler that _defined_ this task, this can be an
		// identifier for a user or a service like the `"task-graph-scheduler"`.
		// **Task submitter required scopes**
		// `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`.
		// This scope is also necessary to _schedule_ a defined task, or _rerun_ a
		// task.
		//
		// Default:    "-"
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		SchedulerID string `json:"schedulerId"`

		// List of scopes (or scope-patterns) that the task is
		// authorized to use.
		//
		// Default:    []
		Scopes []string `json:"scopes"`

		// Arbitrary key-value tags (only strings limited to 4k). These can be used
		// to attach informal meta-data to a task. Use this for informal tags that
		// tasks can be classified by. You can also think of strings here as
		// candidates for formal meta-data. Something like
		// `purpose: 'build' || 'test'` is a good example.
		//
		// Default:    map[]
		Tags json.RawMessage `json:"tags"`

		// Identifier for a group of tasks scheduled together with this task, by
		// scheduler identified by `schedulerId`. For tasks scheduled by the
		// task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if
		// property isn't specified.
		//
		// Syntax:     ^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$
		TaskGroupID string `json:"taskGroupId"`

		// Unique identifier for a worker-type within a specific provisioner
		//
		// Syntax:     ^([a-zA-Z0-9-_]*)$
		// Min length: 1
		// Max length: 22
		WorkerType string `json:"workerType"`
	}
)
